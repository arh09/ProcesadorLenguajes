Especificación de análisis sintáctico (NIVEL 2)

El programa P se estructura en 3 secciones: una dedicada a la declaración de variables (sección VARIABLES),
otra dedicada a  la  declaración  de subprogramas (sección SUBPROGRAMAS) y  otra  dedicada al  uso  de variables
y  subprogramas (sección INSTRUCCIONES).

    programa: PROGRAMA VARIABLES variables SUBPROGRAMAS subprogramas INSTRUCCIONES instrucciones EOF;

Cada variable declarada en un programa tiene un tipo invariable en dicho programa.
Ejemplo de declaración de variables:

VARIABLES
i,max,min:NUM;//i,max y min son variables numéricas y no pueden cambiar su tipo
                        //a lo largo del programa
s:SEQ(NUM);//similarmente, s es una secuencia de números

    variables: (VAR (COMA VAR)* DOS_PUNTOS tipo PyC)*;

Los tipos de datos considerados en P son dos clases (1) tipos elementales:
tipo entero (NUM) y tipo lógico o booleano(LOG) y (2) tipos  no  elementales:
tipo secuencia entera(SEQ(NUM)) y tipo secuencia lógica(SEQ(LOG)).

    tipo: elemental | no_elemental;
        elemental: NUM | LOG ;
        no_elemental: SEQ_NUM | SEQ_LOG;

Los subprogramas se pueden dividir en funciones y procedimientos.

    subprogramas:(funcion | procedimiento)*;

Dentro de los subprogramas puede haber una declaración de variables
y un bloque de instrucciones.

    funcion:FUNCION fun VARIABLES variables INSTRUCCIONES instrucciones FFUNCION;
    procedimiento: PROCEDIMIENTO proc VARIABLES variables INSTRUCCIONES instrucciones FPROCEDIMIENTO;

Llamaremos predicado a la función que devuelve un valor lógico.

    fun: predicado | func;
        func: nombre_funcion  retornoFuncion;

    predicado: expresionF PARENTESIS_ABIERTO params PARENTESIS_CERRADO
    DEV PARENTESIS_ABIERTO LOG VAR PARENTESIS_CERRADO;

La función tiene un conjunto (posiblemente vacío) de parámetros de entrada
y un conjunto (no vacío) de parámetros de salida --> params.

    nombre_funcion: expresionF PARENTESIS_ABIERTO params PARENTESIS_CERRADO;
        expresionF: VAR (BB (VAR|NUMERO))*;

Definimos los nombres de los subprogramas como combinaciones de nombres de variables,
barrabajas y números --> ExpresionF.

    retornoFuncion: DEV PARENTESIS_ABIERTO params PARENTESIS_CERRADO;

        params: elemental VAR COMA params
        | elemental VAR
        | no_elemental VAR COMA params
        | no_elemental VAR
        ;
El procedimiento tiene  un  conjunto  (posiblemente  vacío)  de  parámetros  de  entrada  y
salida. No  hay  devolución  explícita  de resultados (no debe usarsela instrucción dev).

proc: expresionF PARENTESIS_ABIERTO params PARENTESIS_CERRADO (retornoFuncion)?;

P predefine dos funciones para las secuencias(a) un predicado vacia para testar
si una secuencia es vacía y (b) una función ultima_posicion para devolver la última posición
de una secuenciano vacía.
Cualquier expresión numérica puede servir para codificar una posición en una secuencia.
***************

Las instrucciones de P son: asignación, condicional, iteración, ruptura de control,
llamada a procedimiento o función, devolución de resultados de una función y
mostrar por consola el valor de variables.
El lenguaje P también dispone de comentarios de línea(//) y de bloque (/* */).

    instrucciones: (asignacion | condicional | iteracion | ruptura
    | devolucion | llamada_funcion | mostrar)*;

La asignaciónen P puede ser simple o múltiple.

    asignacion: asignacion_simple | asignacion_multiple;

s =[3,4,2,7,9,0,11]; //asignación simple
x,y=1,x+2;           //asignación multiple

    asignacion_simple: VAR IGUAL expresion PyC;
    asignacion_multiple: VAR COMA VAR (COMA VAR)* IGUAL
        (llamada_funcion | expresion COMA expresion (COMA expresion)*) PyC;

        expresion: expr_binaria
            | expr_logica
            | expr_secuencia
            ;

           expr_binaria: NUMERO (operaciones)*
               | VAR (operaciones)*
               | elemento_secuencia (operaciones)*
               | PARENTESIS_ABIERTO expresion_binaria PARENTESIS_CERRADO (operaciones)*
               | ultima_posicion (operaciones)*
               | llamada_funcion (operaciones)*
               ;

               operaciones: SUMA (expr_binaria)
                           |RESTA (expr_binaria)
                           |MULT (expr_binaria)
                           |DIV (expr_binaria)
                           ;

               elemento_secuencia: VAR CORCHETE_ABIERTO expr_binaria CORCHETE_CERRADO;

               ultima_posicion: ULTIMAPOSICION PARENTESIS_ABIERTO VAR PARENTESIS_ABIERTO;

               llamada_funcion: expresionF PARENTESIS_ABIERTO params PARENTESIS_ABIERTO;

           expr_logica: T
                    | F
                    | VAR
                    | llamada_funcion
                    | elemento_secuencia
                    ;

           expr_secuencia: CORCHETE_ABIERTO
                        (expr_binaria(COMA expr_binaria)* | expr_logica(COMA expr_logica)*)?
                        CORCHETE_CERRADO;

La instrucción condicional en P define un bloque de instrucciones cuya ejecución
depende del valor de verdad de una condición.
Por ejemplo,
si(s[i]>max) entonces  //condicion
max=s[i];            //bloque
fsi

La instrucción condicional puede incluir una alternativa sino.
Por ejemplo,
si(s[i]>max) entonces  //condicion
max=s[i];            //bloque si se cumple la condicion
sino
max=0;               //bloque si no se cumple la condicion
fsi

        condicional:SI condicion ENTONCES instrucciones (bloque_opcional)? FSI;

Las condicionesen P se construyen en base a igualdades(==) y desigualdades (!=,<,>,<=,>=)
de expresiones del mismo tipo.
Las  condiciones  se  pueden  concatenar  con  operadores conjunción (&&) y disyunción  (||).
También se puede usar la negación (!).
P incluye dos condiciones especiales: cierto que siempre evalúa a verdadero y
falso que siempre evalúa a falso.

    condicion: PARENTESIS_ABIERTO (expresion | CIERTO | FALSO)
            (desigualdades (expresion | CIERTO | FALSO))?
            (operador_logico)* PARENTESIS_CERRADO;

        desigualdades: IGUALDAD | MAYORQ | MENORQ | MAY | MEN | DISTINTO;

        operador_logico: (AND|OR) (expresion | CIERTO | FALSO)
                (desigualdades (expresion | CIERTO | FALSO))?;

    bloque_opcional: SINO instrucciones;

La iteración en P define un bloque de instrucciones con una condición al principio.
La ejecución del bloque se repite hasta que la condición sea falsa.
Por ejemplo,
i=0;
max=s[i];
mientras(i<=ultima_posicion(s)) hacer
si(s[i]>max) entonces
max=s[i];
fsi
i=i+1;
fmientras

    iteracion: MIENTRAS condicion HACER instrucciones FMIENTRAS;

P dispone de una instrucción de ruptura de control llamada ruptura.

    ruptura: RUPTURA PyC;
**************
    devolucion: DEV expresion PyC;

P dispone de un procedimiento predefinido llamado mostrar para mostrar por consola
los valores de una lista de variables.

    mostrar: MOSTRAR PARENTESIS_ABIERTO VAR PARENTESIS_CERRADO PyC;

La declaración de subprogramas en P permite hacer llamadas a los mismos en la zona
de instrucciones.En el siguiente ejemplo se muestra una llamada a función:
x,y = mayor(s);//llamada a funcion

    asignacion_multiple: VAR COMA VAR (COMA VAR)* IGUAL
        (llamada_funcion | expresion COMA expresion (COMA expresion)*) PyC;